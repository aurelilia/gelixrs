// Comments can be two SLASH tokens...
/* Or a C-style multiline.
    /* Multiline comments can also nest. */
*/

// All code needs to be in functions or class declarations.
// Functions are declared like so:
func add(i32 x, i64 y) -> i64 { // Note the type annotations iX are ints where X is the size in bits
    if (x > y) return y
    x + y // Blocks in gelix are expressions
}


// Function bodies don't have to be blocks:
func add(i32 x, i64 y) -> i64 x + y

// main() is the program's entry point.
func main() {
    // Variables are declared with var:
    var x = 5
    // val makes them immutable:
    val y = 78


    // vars can be reassigned:
    x = 8
    // vals can't:
    y = 7 // Compile Error

    // Gelix is statically typed:
    x = "String" // Compile Error

    // Gelix has if statements:
    var z = 0
    if (x == 5) {
        z = z + 1
    } else {
        z = z - 1
    }

    // if statements can be expressions:
    print(if (2 > 3) "Math is weird!" else "All good.")
    // Both branches must return the same type when used as expression.

    // Gelix also has switch/when expressions:
    val isNumberTen = when (10) {
        10 -> true
        20 -> {
            print("But it was 20 instead!")
            false
        }
        else -> {
            print("It was neither.")
            false
        }
    }

    // For is the only looping construct in Gelix:
    var sum = 0
    for (i in [0, 1, 2]) { // Looping an array literal
        sum = sum + i
    }

    var j = 0
    for (j < 10) { // For with an expression (Similar to 'while' in other languages)
        j--
    }
}


// Classes are declared like this:
class Animal {

    var alive = true
    // Initializer can be ommitted, but must be assigned in init()
    val name

    // Init is a special function called on instance creation
    func init(String name) { 
        // 'this' can be used to access instance variables/functions
        // Note: init is the only function that can mutate val use for initialization purposes if needed
        this.name = name
    }

    func speak() {
        // print and format are built-in functions in the global namespace
        if (this.alive) print(format("I'm {}!", name))
        else print("No response...")
    }
}

// Inheritance:
class Pet ext Animal {

    var owner

    func init(String owner) {
        this.owner = owner
    }
}

// Enums
enum Animal {
    Dog, Cat, Mouse
}

func is_cat(Animal animal) -> bool {
    when (animal) {
        Animal.Cat -> true
        else -> {
            print("Not a cat!")
            false
        }
    }
}

// FFI:
exfn sin(i64 a) -> i64
// Allows defining functions inside libraries/external code.

/* Lastly, a look at all inbuilt types in Gelix:                            Literals:
 * bool                 -> Simple true/false bool.                          true | false
 * i8, i16, i32, i64    -> Integers of varying bit sizes.                   12
 * f32, f64             -> Single and double-precision floats.              24f | 564.03    (f denotes single-precision)
 * char                 -> A text character.  TODO: Determine encoding.     c'c' | c"c"
 * String               -> A simple sequence of chars.                      "Hello" | 'World'
 *
 * File                 -> A wrapper for file I/O. API TBD.                 ---
 *
 * All types behave like classes, Gelix does not have 'primitive' values.
 */

"Thanks for reading!"