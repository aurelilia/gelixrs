/// All of the functions in this module are part of the LLVM IR generated by the compiler,
/// or intended to be used by such code.
/// Most of them are functions not expressible in gelix, but required for
/// important and basic language behavior, so they are implemented in IR by hand.
///
/// MOST OF THESE FUNCTIONS ARE UNSAFE!
/// You should almost never have to use this module outside of 'std'.
///
/// Many of these functions perform raw pointer arithmetic without any checks.
/// If you need to use low-level pointers, look at std::ffi and Ptr instead.

import std/ffi/+

/// Returns the size of the type in bytes; equivalent to sizeof()
extern func gelixrs_get_type_size<T>() -> i64

/// Casts its i64 argument to a pointer,
/// dereferences the pointer, and returns the value at the pointer.
/// Note that for ADTs, which are a pointer in gelix's type system,
/// the pointer is NOT dereferenced - merely returned without any checks.
extern func gelixrs_deref_ptr<T>(ptr: i64) -> T

/// Casts its i64 argument to a pointer, dereferences the pointer,
/// and stores `data` at its location.
extern func gelixrs_set_ptr<T>(ptr: i64, data: T)

/// libc puts
extern func puts(s: i64)

/// libc sprintf
extern variadic func sprintf(s: i64, format: i64) -> i64

/// libc printf (TODO: Remove after #39)
extern variadic func printf(format: String) -> i64

/// regular malloc, allocating the given amount of bytes
/// on the heap and returning a pointer.
extern func malloc(size: i64) -> i64

/// Build a string literal, given a i8* pointer and a
/// length. Will copy the string at the pointer into
/// a heap-allocated string.
func build_string_literal(literal_ptr: i64, len: i64) -> String {
    val literal_ptr = Ptr::<i8>(literal_ptr)
    val new_ptr = allocate::<i8>(len)
    copy_ptr::<i8>(literal_ptr, new_ptr, len)
    val array = Array::<i8>(len, len, new_ptr)
    val string = String(array)
    string
}