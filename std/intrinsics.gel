/// All of the functions in this module are part of the LLVM IR generated by the compiler,
/// or intended to be used by such code.
/// Most of them are functions not expressible in gelix, but required for
/// important and basic language behavior, so they are implemented in IR by hand.
///
/// MOST OF THESE FUNCTIONS ARE UNSAFE!
/// You should almost never have to use this module outside of 'std'.
///
/// Many of these functions perform raw pointer arithmetic without any checks.
/// If you need to use low-level pointers, look at std::ffi and Ptr instead.

import std/memory/+

/// Returns the size of the type in bytes; equivalent to sizeof()
extern func gelixrs_get_type_size<T>() -> usize

/// Writes the given value to the given pointer.
extern func gelixrs_write_ptr<T>(ptr: *T, data: T)

/// LLVM IR ptrtoint
extern func gelixrs_ptr_to_int<T>(ptr: *T) -> u64

/// LLVM IR inttoptr
extern func gelixrs_int_to_ptr<T>(ptr: usize) -> *T

/// LLVM IR GEP
extern func gelixrs_gep<T>(ptr: *T, index: u64) -> *T

/// Increments the refcount on the value
extern func gelixrs_inc_ref<T>(value: T)

/// Decrements the refcount on the value
extern func gelixrs_dec_ref<T>(value: T)

/// These 2 functions are used to increment/decrement the refcount on interfaces.
/// The parameters are split into 2 since interfaces are StructValues,
/// which cannot be cast.
extern func gelixrs_inc_ref_iface(implementor: usize, vtable: usize)
extern func gelixrs_dec_ref_iface(implementor: usize, vtable: usize)

/// Will call the given value's destructor, causing it to be deallocated
/// immediately. Can be very unsafe - does not check for dangling references!
extern func gelixrs_free_type<T: IsPointer>(value: T)

/// Will simply load the given value
extern func gelixrs_load_value<T>(value: T) -> ~T

/// libc puts
extern func puts(s: *i8)

/// libc snprintf
extern variadic func snprintf(buf: *i8, max: usize, format: *i8) -> usize

/// regular malloc, allocating the given amount of bytes
/// on the heap and returning a pointer.
extern func malloc(size: usize) -> usize

/// libc free
extern func free(ptr: usize)

/// libc quick_exit
extern func quick_exit(status: i32)

/// Build a string literal, given a i8* pointer and a
/// length. Will copy the string at the pointer into
/// a heap-allocated string.
func build_string_literal(literal_ptr: *i8, len: usize) -> String {
    val new_ptr = allocate::<i8>(len)
    copy_ptr(literal_ptr, new_ptr, len)
    new String(len, len, new_ptr)
}

/// As the name already says, this function simply does nothing.
/// Used as `free` function on interface implementations of primitives.
func do_nothing() {}
