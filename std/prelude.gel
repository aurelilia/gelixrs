import std/intrinsics/puts
import std/intrinsics/quick_exit
import std/string/ToString

export std/collections/Array
export std/string/String

func print(a: ToString) = puts(a.to_string().ptr.pointer)

func cast<T>(value: T) -> T = value

func try_cast<T, V>(value: T) -> Opt<V> {
    if (value is V) Opt::<V>:Some(value)
    else Opt::<V>:None()
}

func panic(msg: String) {
    print("[gelix] Panicked at: ".append(msg))
    print("[gelix] Exiting.")
    quick_exit(1i32)
}

enum Opt<T> {
    case Some(val value: T)
    case None

    func map<M>(map_fn: (T): M) -> Opt<M> {
        if (this is Opt::<T>:Some) return Opt::<M>:Some(map_fn(this.value))
        Opt::<M>:None()
    }
}

enum Res<T, E> {
    case Ok(val value: T)
    case Err(val err: E)
}