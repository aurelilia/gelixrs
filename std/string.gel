import std/intrinsics/+
import std/math/max
import std/memory/+
// import std/ops/Add

/// A UTF-8 string.
/// Currently, strings are null-terminated.
class String {

    var length: usize
    var capacity: usize
    var ptr: *i8

    /// Construct an empty string with the given capacity.
    /// Will allocate the amount given on the heap (malloc),
    /// capacity of 0 results in no allocation until first insertion.
    construct(capacity) {
        this.ptr = allocate[i8](capacity)
        this.length = 0
    }

    /// Simply construct a string out of raw parts.
    /// Rarely useful, unless dealing with low-level code.
    construct(length, capacity, ptr)

    /// The length of the string, in bytes.
    /// Note that byte length in UTF-8 does not
    /// equal the amount of characters in the string.
    func len() -> i64 {
        // Subtract the null terminator
        max(this.length - 1, 0)
    }

    /// Clears the string, setting the len to 0
    /// and writing a null terminator to the first
    /// index of its pointer.
    func clear() {
        if (this.length == 0) return
        val null_char = load_value_index(this.ptr, this.length - 1)
        write_value(this.ptr, null_char)
        this.length = 1
    }

    /// Appends the given string to itself.
    /// Will not modify the other string.
    /// Returns itself for easy chaining.
    strong func append(other: &String) -> String {
        this.reserve(other.length)
        copy_ptr(other.ptr, index_ptr(this.ptr, this.length), other.length)
        this.length = this.length + other.len()
        this
    }

    /// Allocate enough memory to hold `amount` more elements.
    /// If the string already has the needed capacity, this does nothing.
    func reserve(amount: usize) {
        if (this.capacity > (this.length + amount)) return
        this.capacity = this.length + amount
        val new_ptr = allocate[i8](this.capacity)
        copy_ptr(this.ptr, new_ptr, this.length)
        drop(this.ptr)
        this.ptr = new_ptr
    }
}

/*
impl Free for &String {
    func free() {
        drop(this.ptr)
    }
}

impl ToString for String {
    func to_string() -> String = this
}

impl Add[&ToString, String] for &String {
    func add(other: &ToString) -> String {
        val other = other.to_string()
        // +1 to account for the null terminator
        val new_str = new String(this.len() + other.len() + 1)
        new_str.append(this)
        new_str.append(other)
    }
}

// An interface for types that can be represented as a string.
// Note that generally, ToString should not expose the implementation
// of the type, but instead be information relevant to the user.
//
// For example, a 'Person' class might return its name and age
// in a human-readable format.
interface ToString {
    func to_string() -> String
}

impl ToString for bool {
    func to_string() -> String {
        if (this) "true"
        else "false"
    }
}

/// Simply creates a buffer and writes to it with sprintf.
func sprintf_buf[T: Primitive](buf_len: usize, format: String, value: T) -> String {
    var buffer = new String(buf_len)
    buffer.length = snprintf(buffer.ptr, buf_len, format.ptr, value)
    buffer
}

impl ToString for i64 {
    func to_string() -> String = sprintf_buf(21, "%ld", this)
}

impl ToString for i32 {
    func to_string() -> String = sprintf_buf(12, "%d", this)
}

impl ToString for i16 {
    func to_string() -> String = sprintf_buf(6, "%d", this)
}

impl ToString for i8 {
    func to_string() -> String = sprintf_buf(4, "%d", this)
}

impl ToString for u64 {
    func to_string() -> String = sprintf_buf(21, "%u", this)
}

impl ToString for u32 {
    func to_string() -> String = sprintf_buf(12, "%u", this)
}

impl ToString for u16 {
    func to_string() -> String = sprintf_buf(6, "%u", this)
}

impl ToString for u8 {
    func to_string() -> String = sprintf_buf(4, "%u", this)
}

impl ToString for f64 {
    func to_string() -> String = sprintf_buf(40, "%g", this)
}

impl ToString for f32 {
    func to_string() -> String = sprintf_buf(40, "%g", this)
}
*/