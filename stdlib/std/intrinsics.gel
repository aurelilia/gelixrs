/// All of the functions in this module are part of the LLVM IR generated by the compiler.
/// They are all functions not expressible in gelix, but required for
/// important and basic language behavior, so they are implemented in IR by hand.
///
/// MOST OF THESE FUNCTIONS ARE UNSAFE!
/// You should almost never have to use this module outside of 'std'.
///
/// Many of these functions perform raw pointer arithmetic without any checks.
/// If you need to use low-level pointers, look at std::ffi and Ptr instead.


/// Returns the size of the type in bytes; equivalent to sizeof()
extern func gelixrs_get_type_size<T>() -> i64

/// Casts its i64 argument to a pointer,
/// dereferences the pointer, and returns the value at the pointer.
/// Note that for ADTs, which are a pointer in gelix's type system,
/// the pointer is NOT dereferenced - merely returned without any checks.
extern func gelixrs_deref_ptr<T>(ptr: i64) -> T

/// libc puts
/// TODO: Change the parameter once String is a class
extern func puts(s: String)

/// libc sprintf
extern variadic func sprintf(s: String, format: String) -> i64
