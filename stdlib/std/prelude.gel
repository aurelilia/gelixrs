import std/intrinsics/+
import std/ffi/+

func print(a: ToString) {
    puts(a.to_string())
}

// TODO: Finish 'String' to allow using sprintf,
// then depreciate this.
extern func printnum(a: i64)

// A simple, fixed-size array type.
// E is the type of values it can hold.
//
// To access array items, use the index operator: array[index]
// Accessing an item above the index will cause a crash.
//
// To create a new array, use a literal:
// val arr = [0, 1, 2, 3]
// val text = ["Hello", "I'm", "A", "String", "Array!"]
//
// This is not valid since the type of elements cannot be inferred:
// val a = []
// If you need an empty array, use the constructor on the class.
//
// Retrieving elements works as you'd expect using indexing syntax:
// print([2, 123, 312][1]) // prints 123
class Array<E> {

    var len = 0
    var capacity: i64
    var ptr: Ptr<E>

    construct(size: i64) {
        this.capacity = size
        this.ptr = allocate::<E>(size)
    }

    func get(index: i64) -> E {
        this.ptr.element_at_index(index).dereference()
    }

    func set(index: i64, element: E) -> E {
        val old_elem = this.get(index)
        this.ptr.element_at_index(index).set(element)
        old_elem
    }

    func push(elem: E) {
        this.maybe_extend()
        this.set(this.len, elem)
        this.len = this.len + 1
    }

    func maybe_extend() {
        if (this.len == this.capacity) this.extend()
    }

    func extend() {
        this.capacity = this.capacity * 2
        val new_ptr = allocate::<E>(this.capacity)
        for (i from 0 to this.len) {
            val elem = this.get(i)
            new_ptr.element_at_index(i).set(elem)
        }
        this.ptr = new_ptr
    }
}

/*
// A UTF-8 string.
class String {
    val chars = [i8]

    func len() -> i64 this.chars.len
}
*/

// An interface for types that can be represented as a string.
// Note that generally, toString should not expose the implementation
// of the type, but instead be information relevant to the user.
//
// For example, a 'Person' class might return its name and age
// in a human-readable format.
interface ToString {
    func to_string() -> String
}

impl ToString for bool {
    func to_string() -> String {
        if (this) "true"
        else "false"
    }
}

impl ToString for String {
    func to_string() -> String this
}

impl ToString for i64 {
    func to_string() -> String {
        // This buffer is 20 bytes long.
        // This length is enough to display the largest
        // 64bit int: âˆ’9223372036854775808
        var buffer = "                    "
        // TODO: This segfaults, since the buffer is a constant.
        // Dynamic strings need to be implemented first.
        // sprintf(buffer, "%d", this)
        buffer
    }
}